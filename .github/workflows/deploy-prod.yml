name: Deploy to Production workflow
run-name: ${{ github.actor }} deploys to Production üöÄ
on:
  pull_request:
    branches: [ "feature/prod-workflow" ]

env:
  DOCKER_REPOSITORY: xiilab/astrago
  GIT_DEPLOYMENT_REPOSITORY: xiilab/astrago-deployment

concurrency:
  group: ci-release-${{ github.ref }}
  cancel-in-progress: true

jobs:
  prod-build:
    if: >
      startsWith(github.head_ref, 'release/') || 
      startsWith(github.head_ref, 'hotfix/') && 
      github.event.pull_request.merged == true
    runs-on: [ ubuntu-latest ]
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@417ae3ccd767c252f5661f1ace9f835f9654f2b5 # v3.1.0
      - name: Restore cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Build with Gradle
        run: ./gradlew bootjar --no-daemon --parallel

  prod-deploy:
    needs: [ prod-build ]
    runs-on: [ ubuntu-latest ]
    steps:
      - name: Extract Release Image Tag
        id: extract_image_tag
        run: |
          git fetch --prune --prune-tags origin
          CURRENT_RELEASE=$(git describe --tags "$(git rev-list --tags --max-count=1)")
          IFS='.' read -ra SPLIT_CURRENT_RELEASE <<< "${CURRENT_RELEASE:1}"
          
          BRANCH_VERSION=$(echo "${GITHUB_HEAD_REF##*/}")
          IFS='.' read -ra SPLIT_BRANCH_VERSION <<< "${BRANCH_VERSION}"
          
          if [[ "$GITHUB_HEAD_REF" == release/* ]]
          then
          if [[ "${SPLIT_BRANCH_VERSION[0]}" -gt "${SPLIT_CURRENT_RELEASE[0]}" ]]
          then
          NEW_RELEASE=v$(( SPLIT_CURRENT_RELEASE[0] + 1)).0.0;
          elif [[ "${SPLIT_BRANCH_VERSION[0]}" -eq "${SPLIT_CURRENT_RELEASE[0]}" ]]
          then
          NEW_RELEASE=v${SPLIT_CURRENT_RELEASE[0]}.$(( SPLIT_CURRENT_RELEASE[1] + 1)).0;
          else
          echo "$BRANCH_VERSIONÎäî $CURRENT_RELEASEÏùò Major Version Î≥¥Îã§ ÌÅ¨Í±∞ÎÇò Í∞ôÏïÑÏïº Ìï©ÎãàÎã§." && exit 1
          fi
          else
          NEW_RELEASE=v${SPLIT_CURRENT_RELEASE[0]}.${SPLIT_CURRENT_RELEASE[1]}.$(( SPLIT_CURRENT_RELEASE[2] + 1))
          fi
          
          echo "NEW_RELEASE=$NEW_RELEASE" >> $GITHUB_ENV
          IMAGE_TAG=${NEW_RELEASE}-$(git rev-parse --short=4 HEAD)
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV

      - name: Print variables
        run: |
          echo "NEW_RELEASE=$NEW_RELEASE"
          echo "IMAGE_TAG=$IMAGE_TAG"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # core image build & push
      - name: Build and push Core Docker images
        uses: docker/build-push-action@v5.1.0
        with:
          context: ./server-core
          file: server-core/Dockerfile
          push: true
          tags: $DOCKER_REPOSITORY:core-$IMAGE_TAG
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # batch image build & push
      - name: Build and push Batch Docker images
        uses: docker/build-push-action@v5.1.0
        with:
          context: ./server-batch
          file: server-batch/Dockerfile
          push: true
          tags: $DOCKER_REPOSITORY:batch-$IMAGE_TAG
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # monitor image build & push
      - name: Build and push Monitor Docker images
        uses: docker/build-push-action@v5.1.0
        with:
          context: ./server-monitor
          file: server-monitor/Dockerfile
          push: true
          tags: $DOCKER_REPOSITORY:monitor-$IMAGE_TAG
          cache-from: type=gha
          cache-to: type=gha,mode=max

  prod-delivery:
    needs: [ prod-deploy ]
    runs-on: [ ubuntu-latest ]
    steps:
      - name: clone astrago deploy git repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.TOKEN }}
          repository: ${{ env.DEPLOYMENT_REPOSITORY }}

      - name: stage Ïù¥ÎØ∏ÏßÄ Ï†ïÎ≥¥ ÏàòÏ†ï
        uses: mikefarah/yq@master
        with:
          cmd: |
            yq -i '.astrago.core.repository = "$DOCKER_REPOSITORY/core"' 'environments/stage/values.yaml'
            yq -i '.astrago.core.imageTag = "$IMAGE_TAG"' 'environments/stage/values.yaml'
            yq -i '.astrago.batch.repository = "$DOCKER_REPOSITORY/batch"' 'environments/stage/values.yaml'
            yq -i '.astrago.batch.imageTag = "$IMAGE_TAG"' 'environments/stage/values.yaml'
            yq -i '.astrago.monitor.repository = "$DOCKER_REPOSITORY/monitor"' 'environments/stage/values.yaml'
            yq -i '.astrago.monitor.imageTag = "$IMAGE_TAG"' 'environments/stage/values.yaml'

      - name: Commit and Push
        run: |
          git config --global user.email "100milliongold@xiilab.com"
          git config --global user.name "100milliongold"
          git add .
          git commit -m "update backend image tag"
          git push

  notify_slack:
    if: always()
    needs: [ prod-delivery ]  # Ïù¥ ÏûëÏóÖÏù¥ ÏùòÏ°¥ÌïòÎäî Ïù¥Ï†Ñ ÏûëÏóÖÏùò Ïù¥Î¶Ñ Ï∂îÍ∞Ä
    runs-on: [ self-hosted, linux ]
    permissions:
      actions: 'read'
    steps:
      - name: Slack Workflow Notification
        uses: Gamesight/slack-workflow-status@master
        with:
          # Required Input
          repo_token: ${{secrets.GITHUB_TOKEN}}
          slack_webhook_url: ${{secrets.SLACK_WEBHOOK_URL}}
          # Optional Input
          channel: '#uyuni-suite'
          name: 'Astrago Build Agent'
          icon_emoji: ':rocket:'
          icon_url: 'https://avatars0.githubusercontent.com/u/1701160?s=96&v=4'

