name: Deploy to Production Workflow
run-name: ${{ github.actor }} Deploys to Production üöÄ
on:
  push:
    tags: [ 'v*.*.*' ]

env:
  DOCKER_REPOSITORY: xiilab/astrago
  GIT_DEPLOYMENT_REPOSITORY: xiilab/astrago-deployment

jobs:
  integration:
    runs-on: [ ubuntu-latest ]
    outputs:
      image-tag: ${{ steps.extract_image_tag.outputs.image-tag }}
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@417ae3ccd767c252f5661f1ace9f835f9654f2b5 # v3.1.0
      - name: Restore cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Build with Gradle
        run: ./gradlew bootjar --no-daemon --parallel

      - name: Set Image Tag
        id: extract_image_tag
        run: |
          IMAGE_TAG=${{ github.ref_name }}
          echo "image-tag=$IMAGE_TAG"
          echo "image-tag=$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # core image build & push
      - name: Build and push Core Docker images
        uses: docker/build-push-action@v5.1.0
        with:
          context: ./server-core
          file: server-core/Dockerfile
          push: true
          tags: ${{ env.DOCKER_REPOSITORY }}:core-${{ steps.extract_image_tag.outputs.image-tag }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # batch image build & push
      - name: Build and push Batch Docker images
        uses: docker/build-push-action@v5.1.0
        with:
          context: ./server-batch
          file: server-batch/Dockerfile
          push: true
          tags: ${{ env.DOCKER_REPOSITORY }}:batch-${{ steps.extract_image_tag.outputs.image-tag }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # monitor image build & push
      - name: Build and push Monitor Docker images
        uses: docker/build-push-action@v5.1.0
        with:
          context: ./server-monitor
          file: server-monitor/Dockerfile
          push: true
          tags: ${{ env.DOCKER_REPOSITORY }}:monitor-${{ steps.extract_image_tag.outputs.image-tag }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  delivery:
    needs: [ integration ]
    runs-on: [ ubuntu-latest ]
    steps:
      - name: clone astrago deploy git repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.TOKEN }}
          repository: ${{ env.GIT_DEPLOYMENT_REPOSITORY }}

      - name: stage Ïù¥ÎØ∏ÏßÄ Ï†ïÎ≥¥ ÏàòÏ†ï
        uses: mikefarah/yq@master
        with:
          cmd: |
            yq -i '.astrago.core.repository = "${{ env.DOCKER_REPOSITORY }}"' 'environments/prod/values.yaml'
            yq -i '.astrago.core.imageTag = "${{ needs.integration.outputs.image-tag }}"' 'environments/prod/values.yaml'
            yq -i '.astrago.batch.repository = "${{ env.DOCKER_REPOSITORY }}"' 'environments/prod/values.yaml'
            yq -i '.astrago.batch.imageTag = "${{ needs.integration.outputs.image-tag }}"' 'environments/prod/values.yaml'
            yq -i '.astrago.monitor.repository = "${{ env.DOCKER_REPOSITORY }}"' 'environments/prod/values.yaml'
            yq -i '.astrago.monitor.imageTag = "${{ needs.integration.outputs.image-tag }}"' 'environments/prod/values.yaml'

      - name: Commit and Push
        run: |
          git config --global user.email "100milliongold@xiilab.com"
          git config --global user.name "100milliongold"
          git add .
          git commit -m "update backend image tag"
          git push

  notify_slack:
    if: always()
    needs: [ delivery ]  # Ïù¥ ÏûëÏóÖÏù¥ ÏùòÏ°¥ÌïòÎäî Ïù¥Ï†Ñ ÏûëÏóÖÏùò Ïù¥Î¶Ñ Ï∂îÍ∞Ä
    runs-on: [ self-hosted, linux ]
    permissions:
      actions: 'read'
    steps:
      - name: Slack Workflow Notification
        uses: Gamesight/slack-workflow-status@master
        with:
          # Required Input
          repo_token: ${{secrets.GITHUB_TOKEN}}
          slack_webhook_url: ${{secrets.SLACK_WEBHOOK_URL}}
          # Optional Input
          channel: '#uyuni-suite'
          name: 'Astrago Build Agent'
          icon_emoji: ':rocket:'
          icon_url: 'https://avatars0.githubusercontent.com/u/1701160?s=96&v=4'

