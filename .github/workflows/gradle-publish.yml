name: astrago backend image CI

on:
  push:
    branches: [ "develop", "master" ]
    tags:
      - v.**

jobs:
  build:
    runs-on: [ self-hosted, linux ]
    outputs:
      branch: "${{ steps.extract_branch.outputs.branch }}"
      tag: ${{ steps.out_image.outputs.tag }}
      url: ${{ steps.out_image.outputs.url }}

    permissions:
      contents: write

    steps:
      # slack message 발송
      - name: Send first message
        uses: slackapi/slack-github-action@v1.25.0
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
        with:
          channel-id: "C0377QY9PLH"
          payload: |
            {
              "text": ":rocket: Astrago CICD Agent",
              "blocks": [
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": ":rocket: Astrago CICD Agent"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*프로젝트:* `${{ github.repository }}`"
                  }
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*브랜치:* `${{ github.ref_name }}`"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*요청자:* `${{ github.actor }}`"
                    }
                  ]
                },
                {
                  "type": "divider"
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": ":rocket:*빌드환경 초기화*"
                  }
                }
              ]
            }
      # 원격머신에 repo checkout
      - name: Checkout
        uses: actions/checkout@v4

      # gradle cache
      - name: Gradle Caching
        uses: actions/cache@v3
        with:
          path: |
            ~/gradle/caches
            ~/gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # JDK 설정
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle

      # Gradlew set permission
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # Gradle build
      - name: Build with Gradle
        run: ./gradlew bootjar --no-daemon --parallel

      # Gradle build에 따른 메시지 발송
      - name: Send build result
        if: success()
        uses: slackapi/slack-github-action@v1.25.0
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
        with:
          channel-id: "C0377QY9PLH"
          update-ts: ${{ steps.slack.outputs.ts }}
          payload: |
            {
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Gradle build result:* :white_check_mark:"
                  }
                }
              ]
            }

      # Gradle build에 따른 메시지 발송
      - name: Send build result
        if: failure()
        uses: slackapi/slack-github-action@v1.25.0
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
        with:
          channel-id: "C0377QY9PLH"
          update-ts: ${{ steps.slack.outputs.ts }}
          payload: |
            {
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Gradle build result:* :no_entry_sign:"
                  }
                }
              ]
            }
      # 브랜치 이름 저장
      - name: 브랜치 네임 저장
        shell: bash
        run: echo "branch=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}" >> $GITHUB_OUTPUT
        id: extract_branch

      # 브랜치 네임이 마스터일 경우에만 docker.io 저장소로 보낸다
      - name: 브랜치에 맞는 이미지 레파지토리 확인
        uses: haya14busa/action-cond@v1
        id: image-repo
        with:
          cond: ${{ steps.extract_branch.outputs.branch  == 'master' }}
          if_true: "docker.io/xiilab"
          if_false: "harbor.xiilab.com:32443/uyuni"

      # 브랜치 네임이 마스터일 경우에만 master 이름으로 지정하고 나머지는 develop 으로 지정한다.
      - name: 브랜치에 맞는 이미지 태그 지정 1
        uses: haya14busa/action-cond@v1
        id: cond_branch
        with:
          cond: ${{ steps.extract_branch.outputs.branch  == 'master'  }}
          if_true: 'master'
          if_false: 'develop'

      # 이미지 태그 지정
      - name: 태그 지정시 버전을 태그에 명시
        uses: haya14busa/action-cond@v1
        id: image_tag
        with:
          cond: ${{ steps.tags.outputs.tag != '' }}
          # if_true: "${{steps.tags.outputs.tag}}"
          if_true: "${{steps.cond_branch.outputs.value}}"
          if_false: "${{steps.cond_branch.outputs.value}}"

      # Image Tag 생성 위한 github sha 저장
      - name: Image Tag 생성 위한 github sha 저장
        id: vars
        run: |
          calculatedSha=$(git rev-parse --short ${{ github.sha }})
          echo "COMMIT_SHORT_SHA=$calculatedSha" >> $GITHUB_ENV

      # Dockerhub에 로그인
      - name: DockerHub 에 로그인
        if: ${{ steps.image-repo.outputs.value == 'docker.io/xiilab' }}
        uses: docker/login-action@v3.0.0
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Harbor에 로그인
      - name: harbor.xiilab.com:32443 로그인
        if: ${{ steps.image-repo.outputs.value == 'harbor.xiilab.com:32443/uyuni' }}
        uses: docker/login-action@v3.0.0
        with:
          registry: harbor.xiilab.com:32443
          username: ${{ secrets.HARBOR_USERNAME }}
          password: ${{ secrets.HARBOR_PASSWORD }}

      # Docker buildx 설정
      - name: Docker Setup Buildx
        if: ${{ steps.image-repo.outputs.value == 'docker.io/xiilab' }}
        uses: docker/setup-buildx-action@v3.0.0

      # Harbor buildx 설정
      - name: Docker Setup Buildx
        if: ${{ steps.image-repo.outputs.value == 'harbor.xiilab.com:32443/uyuni' }}
        uses: docker/setup-buildx-action@v3.0.0
        with:
          buildkitd-flags: --debug --allow-insecure-entitlement security.insecure --allow-insecure-entitlement network.host
          platforms: linux/amd64
          driver-opts: |
            network=host
          #config: /etc/buildkit/buildkitd.toml
          config-inline: |
            [registry."harbor.xiilab.com:32443"]
              http = true
              insecure = true
              mirrors = ["harbor.xiilab.com:32443"]
              ca=["/etc/docker/certs.d/harbor.xiilab.com:32443/ca.crt"]
              [[registry."harbor.xiilab.com:32443".keypair]]
                key="/home/runner/tls/tls.key"
                cert="/home/runner/tls/tls.crt"

      # core image build & push
      - name: Build and push Core Docker images
        uses: docker/build-push-action@v5.1.0
        with:
          context: ./server-core
          file: server-core/Dockerfile
          push: true
          tags: |
            ${{ steps.image-repo.outputs.value }}/server-core:${{ steps.image_tag.outputs.value }}
            ${{ steps.image-repo.outputs.value }}/server-core:${{ steps.image_tag.outputs.value}}-${{ env.COMMIT_SHORT_SHA }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # core image build에 따른 메시지 발송
      - name: Send build result
        if: success()
        uses: slackapi/slack-github-action@v1.25.0
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
        with:
          channel-id: "C0377QY9PLH"
          update-ts: ${{ steps.slack.outputs.ts }}
          payload: |
            {
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Core image build result:* :white_check_mark:"
                  }
                }
              ]
            }

      # core image build에 따른 메시지 발송
      - name: Send build result
        if: failure()
        uses: slackapi/slack-github-action@v1.25.0
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
        with:
          channel-id: "C0377QY9PLH"
          update-ts: ${{ steps.slack.outputs.ts }}
          payload: |
            {
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Core image build result:* :no_entry_sign:"
                  }
                }
              ]
            }

      # batch image build & push
      - name: Build and push Batch Docker images
        uses: docker/build-push-action@v5.1.0
        with:
          context: ./server-batch
          file: server-batch/Dockerfile
          push: true
          tags: |
            ${{ steps.image-repo.outputs.value }}/server-batch:${{ steps.image_tag.outputs.value }}
            ${{ steps.image-repo.outputs.value }}/server-batch:${{ steps.image_tag.outputs.value}}-${{ env.COMMIT_SHORT_SHA }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # batch image build에 따른 메시지 발송
      - name: Send build result
        if: success()
        uses: slackapi/slack-github-action@v1.25.0
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
        with:
          channel-id: "C0377QY9PLH"
          update-ts: ${{ steps.slack.outputs.ts }}
          payload: |
            {
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Batch image build result:* :white_check_mark:"
                  }
                }
              ]
            }

      # core image build에 따른 메시지 발송
      - name: Send build result
        if: failure()
        uses: slackapi/slack-github-action@v1.25.0
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
        with:
          channel-id: "C0377QY9PLH"
          update-ts: ${{ steps.slack.outputs.ts }}
          payload: |
            {
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Batch image build result:* :no_entry_sign:"
                  }
                }
              ]
            }

      # monitor image build & push
      - name: Build and push Monitor Docker images
        uses: docker/build-push-action@v5.1.0
        with:
          context: ./server-monitor
          file: server-monitor/Dockerfile
          push: true
          tags: |
            ${{ steps.image-repo.outputs.value }}/server-monitor:${{ steps.image_tag.outputs.value }}
            ${{ steps.image-repo.outputs.value }}/server-monitor:${{ steps.image_tag.outputs.value}}-${{ env.COMMIT_SHORT_SHA }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # monitor image build에 따른 메시지 발송
      - name: Send build result
        if: success()
        uses: slackapi/slack-github-action@v1.25.0
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
        with:
          channel-id: "C0377QY9PLH"
          update-ts: ${{ steps.slack.outputs.ts }}
          payload: |
            {
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Monitor image build result:* :white_check_mark:"
                  }
                }
              ]
            }

      # monitor image build에 따른 메시지 발송
      - name: Send build result
        if: failure()
        uses: slackapi/slack-github-action@v1.25.0
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
        with:
          channel-id: "C0377QY9PLH"
          update-ts: ${{ steps.slack.outputs.ts }}
          payload: |
            {
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Monitor image build result:* :no_entry_sign:"
                  }
                }
              ]
            }

      ## Write for matrix outputs workaround
      - id: out_image
        run: |
          echo "tag=${{ steps.image_tag.outputs.value}}-${{ env.COMMIT_SHORT_SHA }}" >> $GITHUB_OUTPUT
          echo "url=${{ steps.image-repo.outputs.value }}" >> $GITHUB_OUTPUT

  push_helm:
    needs: [ build ]
    runs-on: [ self-hosted, linux ]
    steps:
      - name: clone helmproject
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.TOKEN }}
          repository: "xiilab/astrago-deployment"
      - name: debug
        run: echo "${{ needs.read.outputs.result }}"

      - name: master 이미지 정보 수정
        if: ${{ needs.read.outputs.branch == 'master' }}
        uses: mikefarah/yq@master
        with:
          cmd: |
            yq -i '.astrago.core.imageTag = "${{ needs.build.outputs.tag }}"' 'environments/default/values.yaml'
            yq -i '.astrago.batch.imageTag = "${{ needs.build.outputs.tag }}"' 'environments/default/values.yaml'
            yq -i '.astrago.monitor.imageTag = "${{ needs.build.outputs.tag }}"' 'environments/default/values.yaml'

      - name: dev 이미지 정보 수정
        if: ${{ needs.read.outputs.branch != 'master' }}
        uses: mikefarah/yq@master
        with:
          cmd: |
            yq -i '.astrago.core.imageTag = "${{ needs.build.outputs.tag }}"' 'environments/dev/values.yaml'
            yq -i '.astrago.batch.imageTag = "${{ needs.build.outputs.tag }}"' 'environments/dev/values.yaml'
            yq -i '.astrago.monitor.imageTag = "${{ needs.build.outputs.tag }}"' 'environments/dev/values.yaml'
      - name: push monochart
        run: | #helmfile -e dev -l type=app template > monochart/monochart.yaml
          cat environments/dev/values.yaml

          git pull
          git config --global user.email "100milliongold@xiilab.com"
          git config --global user.name "100milliongold"
          git add .
          git commit -m "update monochart"
          git push

      # monochart push 여부에 따른 message 발송
      - name: Send push monochart result
        if: success()
        uses: slackapi/slack-github-action@v1.25.0
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
        with:
          channel-id: "C0377QY9PLH"
          update-ts: ${{ steps.slack.outputs.ts }}
          payload: |
            {
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Monochart push result:* :white_check_mark:"
                  }
                }
              ]
            }

      # monitor image build에 따른 메시지 발송
      - name: Send build result
        if: failure()
        uses: slackapi/slack-github-action@v1.25.0
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
        with:
          channel-id: "C0377QY9PLH"
          update-ts: ${{ steps.slack.outputs.ts }}
          payload: |
            {
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Monochart push result:* :no_entry_sign:"
                  }
                }
              ]
            }


  notify_slack:
    needs: [ build, push_helm ]  # 이 작업이 의존하는 이전 작업의 이름 추가
    runs-on: [ self-hosted, linux ]
    steps:
      - name: 작업 상태 확인
        id: check_status
        run: 'echo "작업 상태: ${{ job.status }}"'

      # job 성공 여부에 따른 message 발송
      - name: Send push monochart result
        if: ${{ job.status == 'success' }}
        uses: slackapi/slack-github-action@v1.25.0
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
        with:
          channel-id: "C0377QY9PLH"
          update-ts: ${{ steps.slack.outputs.ts }}
          payload: |
            {
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Astrago build가 성공하였습니다.:* :tada:"
                  }
                }
              ]
            }

      # job 성공 따른 메시지 발송
      - name: Send build result
        if: ${{ job.status == 'failure' }}
        uses: slackapi/slack-github-action@v1.25.0
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
        with:
          channel-id: "C0377QY9PLH"
          update-ts: ${{ steps.slack.outputs.ts }}
          payload: |
            {
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Astrago build가 실패하였습니다.:* :warning:"
                  }
                }
              ]
            }
