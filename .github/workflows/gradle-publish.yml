name: uyuni backend image CI

on:
  push:
    branches: ["develop", "master" , "build-test"]
  pull_request:
    branches: ["develop", "master"]

jobs:
  build:
    runs-on: [self-hosted, linux]
    permissions:
      contents: write
    strategy:
      max-parallel: 3
      matrix:
        include:
          - image: xiilab/uyuni-backend-core
            harbor: harbor.xiilab.com:32443/uyuni/uyuni-backend-core
            path: server-core
            dockerfile: server-core/Dockerfile
          - image: xiilab/uyuni-backend-batch
            harbor: harbor.xiilab.com:32443/uyuni/server-batch
            path: server-batch
            dockerfile: server-batch/Dockerfile
          - image: xiilab/uyuni-backend-monitor
            harbor: harbor.xiilab.com:32443/uyuni/server-monitor
            path: server-monitor
            dockerfile: server-monitor/Dockerfile
    steps:
    # 원격머신에 repo checkout
    - name: Checkout
      uses: actions/checkout@v3
    # JDK 설정
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'zulu'

    - name: Extract branch name
      shell: bash
      run: echo "branch=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}" >> $GITHUB_OUTPUT
      id: extract_branch
      
    # 브랜치 네임이 마스터일 경우에만 docker.io 저장소로 보낸다
    - name: 브랜치에 맞는 이미지 레파지토리 확인
      uses: haya14busa/action-cond@v1
      id: image-repo
      with:
        cond: ${{ steps.extract_branch.outputs.branch  == 'master' }}
        if_true: "docker.io/xiilab"
        if_false: "harbor.xiilab.com:32443/uyuni"
    
    
    # Image Tag 생성 위한 github sha 저장
    - name: Image Tag 생성 위한 github sha 저장
      id: vars
      run: |
        calculatedSha=$(git rev-parse --short ${{ github.sha }})
        echo "COMMIT_SHORT_SHA=$calculatedSha" >> $GITHUB_ENV
    
    # Docker buildx 설정
    - name: Docker Setup Buildx
      uses: docker/setup-buildx-action@v3.0.0

    # Dockerhub에 로그인
    - name: DockerHub 에 로그인
      if: ${{ steps.image-repo.outputs.value == 'docker.io/xiilab' }}
      uses: docker/login-action@v3.0.0
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
        
    # Harbor에 로그인
    - name: harbor.xiilab.com:32443 로그인
      if: ${{ steps.image-repo.outputs.value == 'harbor.xiilab.com:32443/uyuni' }}
      uses: docker/login-action@v3.0.0
      with:
        registry: harbor.xiilab.com:32443
        username: ${{ secrets.HARBOR_USERNAME }}
        password: ${{ secrets.HARBOR_PASSWORD }}
    
    # docker metadata 설정
    - name: Docker Metadata action
      id: meta
      uses: docker/metadata-action@v5.3.0
      with:
        images: ${{ steps.image-repo.outputs.value }}/${{ matrix.path }}

    #  
    - name: 이미지 레파지토리가 맞는지 디버깅
      run: |
        echo "해당 이미지는 \"${{ steps.image-repo.outputs.value }}/${{ matrix.path }}:${{ steps.extract_branch.outputs.branch }}\" 입니다."
        echo "${{ steps.meta.outputs.tags }}"

    # Gradle build
    - name: Build with Gradle
      run: ./gradlew ${{ matrix.path }}:bootjar

    # Docker Image 빌드 및 푸시
    - name: Build and push Docker images
      id: build
      uses: docker/build-push-action@v5.1.0
      with:
        context: ./${{ matrix.path }}
        file: ${{ matrix.dockerfile }}
        push: true
        tags: |
          ${{ steps.meta.outputs.tags }}
          ${{ steps.meta.outputs.tags }}-${{ env.COMMIT_SHORT_SHA }}
        labels: ${{ steps.meta.outputs.labels }}
    
    ## Write for matrix outputs workaround 
    - uses: cloudposse/github-action-matrix-outputs-write@main
      id: out
      with:
        matrix-step-name: ${{ github.job }}
        matrix-key: ${{ matrix.path }}
        outputs: |-
          image: ${{ steps.image-repo.outputs.value }}/${{ matrix.path }}
          ## Multiline string
          tags: ${{ steps.extract_branch.outputs.branch }}-${{ env.COMMIT_SHORT_SHA }}

    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}-${{ env.COMMIT_SHORT_SHA }}

  ## Read matrix outputs 
  read:
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - uses: cloudposse/github-action-matrix-outputs-read@main
        id: read
        with:
          matrix-step-name: build
    outputs:
      result: "${{ steps.read.outputs.result }}"

  push_helm:
    needs: [read]
    runs-on: [self-hosted, linux]
    steps:
      - name: clone helmproject
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.TOKEN }}
          repository: "xiilab/uyuni-infra"
      - name : debug
        run: echo "${{ needs.read.outputs.result }}"
      # - name: update env value file
      #   uses: mikefarah/yq@master
      #   with:
      #     cmd: |
      #       yq -i '.uyuni.core.imageTag = "${{ fromJson(needs.read.outputs.result) }}"' 'environments/dev/values.yaml'
      #       yq -i '.uyuni.batch.imageTag = "${{ fromJson(needs.read.outputs.result) }}"' 'environments/dev/values.yaml'
      #       yq -i '.uyuni.monitor.imageTag = "${{ fromJson(needs.read.outputs.result) }}"' 'environments/dev/values.yaml'
      # - name: push monochart
      #   run: |
      #     cat environments/dev/values.yaml
      #     echo "${{ fromJson(needs.read.outputs.result) }}"
      #     echo "${{ fromJson(needs.read.outputs.result) }}"
      #     echo "${{ fromJson(needs.read.outputs.result) }}"
      #     helmfile -e dev template > monochart/monochart.yaml
      #     git pull
      #     git config --global user.email "hc.park@xiilab.com"
      #     git config --global user.name "hc.park"
      #     git add monochart/monochart.yaml
      #     git commit -m "update monochart"
      #     git push
  # notify_slack:
  #   needs: [build, push_helm]  # 이 작업이 의존하는 이전 작업의 이름 추가
  #   runs-on: [self-hosted, linux]
  #   steps:
  #     - name: 작업 상태 확인
  #       id: check_status
  #       run: 'echo "작업 상태: ${{ job.status }}"'

  #     - name: 성공 시 Slack 알림 전송
  #       if: ${{ job.status }} == 'success'
  #       uses: 8398a7/action-slack@v3
  #       with:
  #         status: success
  #         color: good
  #         text: 'Uyuni 백엔드 이미지 CI가 성공했습니다! :tada:'
  #       env:
  #         SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  #     - name: 실패 시 Slack 알림 전송
  #       if: ${{ job.status }} == 'failure'
  #       uses: 8398a7/action-slack@v3
  #       with:
  #         status: failure
  #         color: danger
  #         text: 'Uyuni 백엔드 이미지 CI가 실패했습니다. :warning:'
  #       env:
  #         SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
