name: uyuni backend image CI

on:
  push:
    branches: ["develop", "master" ]
    tags:
      - v.**
jobs:
  build:
    runs-on: [self-hosted, linux]
    permissions:
      contents: write
    strategy:
      max-parallel: 3
      matrix:
        include:
          - image: xiilab/uyuni-backend-core
            harbor: harbor.xiilab.com:32443/uyuni/uyuni-backend-core
            path: server-core
            dockerfile: server-core/Dockerfile
          - image: xiilab/uyuni-backend-batch
            harbor: harbor.xiilab.com:32443/uyuni/server-batch
            path: server-batch
            dockerfile: server-batch/Dockerfile
          - image: xiilab/uyuni-backend-monitor
            harbor: harbor.xiilab.com:32443/uyuni/server-monitor
            path: server-monitor
            dockerfile: server-monitor/Dockerfile
    steps:
    # 원격머신에 repo checkout
    - name: Checkout
      uses: actions/checkout@v4
    # 브랜치 이름 저장
    - name: 브랜치 네임 저장
      shell: bash
      run: echo "branch=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}" >> $GITHUB_OUTPUT
      id: extract_branch
      
    # 브랜치 네임이 마스터일 경우에만 docker.io 저장소로 보낸다
    - name: 브랜치에 맞는 이미지 레파지토리 확인
      uses: haya14busa/action-cond@v1
      id: image-repo
      with:
        cond: ${{ steps.extract_branch.outputs.branch  == 'master' }}
        if_true: "docker.io/xiilab"
        if_false: "harbor.xiilab.com:32443/uyuni"

     # TO-DO 해당 스텝은 동작이 안되니 수정 필요
    - name: 태그네임 가져오기
      id: tags
      run: echo "tag=${GITHUB_REF#refs/*/}" >> $GITHUB_OUTPUT


    # 브랜치 네임이 마스터일 경우에만 master 이름으로 지정하고 나머지는 develop 으로 지정한다.
    - name: 브랜치에 맞는 이미지 태그 지정 1
      uses: haya14busa/action-cond@v1
      id: cond_branch
      with:
        cond: ${{ steps.extract_branch.outputs.branch  == 'master'  }}
        if_true: 'master'
        if_false: 'develop'

    # TO-DO 해당 스텝은 동작이 안되니 수정 필요
    - name: 태그 지정시 버전을 태그에 명시
      uses: haya14busa/action-cond@v1
      id: image_tag
      with:
        cond: ${{ steps.tags.outputs.tag != '' }}
        # if_true: "${{steps.tags.outputs.tag}}"
        if_true: "${{steps.cond_branch.outputs.value}}"
        if_false: "${{steps.cond_branch.outputs.value}}"

    # Image Tag 생성 위한 github sha 저장
    - name: Image Tag 생성 위한 github sha 저장
      id: vars
      run: |
        calculatedSha=$(git rev-parse --short ${{ github.sha }})
        echo "COMMIT_SHORT_SHA=$calculatedSha" >> $GITHUB_ENV
    
    

    # Dockerhub에 로그인
    - name: DockerHub 에 로그인
      if: ${{ steps.image-repo.outputs.value == 'docker.io/xiilab' }}
      uses: docker/login-action@v3.0.0
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    # Harbor에 로그인
    - name: harbor.xiilab.com:32443 로그인
      if: ${{ steps.image-repo.outputs.value == 'harbor.xiilab.com:32443/uyuni' }}
      uses: docker/login-action@v3.0.0
      with:
        registry: harbor.xiilab.com:32443
        username: ${{ secrets.HARBOR_USERNAME }}
        password: ${{ secrets.HARBOR_PASSWORD }}

    # docker metadata 설정
    - name: Docker Metadata action
      id: meta
      uses: docker/metadata-action@v5.3.0
      with:
        images: ${{ steps.image-repo.outputs.value }}/${{ matrix.path }}

    # Docker buildx 설정
    - name: Docker Setup Buildx
      if: ${{ steps.image-repo.outputs.value == 'docker.io/xiilab' }}
      uses: docker/setup-buildx-action@v3.0.0
      
    # Harbor buildx 설정
    - name: Docker Setup Buildx
      if: ${{ steps.image-repo.outputs.value == 'harbor.xiilab.com:32443/uyuni' }}
      uses: docker/setup-buildx-action@v3.0.0
      with:
        buildkitd-flags: --debug --allow-insecure-entitlement security.insecure --allow-insecure-entitlement network.host
        platforms: linux/amd64
        driver-opts: |
          network=host
        #config: /etc/buildkit/buildkitd.toml
        config-inline: |
          [registry."harbor.xiilab.com:32443"]
            http = true
            insecure = true
            mirrors = ["harbor.xiilab.com:32443"]
            ca=["/etc/docker/certs.d/harbor.xiilab.com:32443/ca.crt"]
            [[registry."harbor.xiilab.com:32443".keypair]]
              key="/home/runner/tls/tls.key"
              cert="/home/runner/tls/tls.crt"


    - name: 이미지 레파지토리가 맞는지 디버깅
      run: |
        echo "해당 이미지는 \"${{ steps.image-repo.outputs.value }}/${{ matrix.path }}:${{ steps.image_tag.outputs.value }}\" 입니다."
        echo "${{ steps.meta.outputs.json }}"

    # JDK 설정
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'zulu'
        cache: 'gradle'
    
    - name: Gradle Caching
      uses: actions/cache@v3
      with:
        path: |  
             ./.gradle/caches
             ./.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
             ${{ runner.os }}-gradle-

    # Gradle build
    - name: Build with Gradle
      run: ./gradlew ${{ matrix.path }}:bootjar

    # Docker Image 빌드 및 푸시
    - name: Build and push Docker images
      id: build
      uses: docker/build-push-action@v5.1.0
      with:
        context: ./${{ matrix.path }}
        file: ${{ matrix.dockerfile }}
        push: true
        tags: |
          ${{ steps.image-repo.outputs.value }}/${{ matrix.path }}:${{ steps.image_tag.outputs.value }}
          ${{ steps.image-repo.outputs.value }}/${{ matrix.path }}:${{ steps.image_tag.outputs.value}}-${{ env.COMMIT_SHORT_SHA }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    ## Write for matrix outputs workaround
    - uses: cloudposse/github-action-matrix-outputs-write@main
      id: out
      with:
        matrix-step-name: ${{ github.job }}
        matrix-key: ${{ matrix.path }}
        outputs: |-
          image: ${{ steps.image-repo.outputs.value }}/${{ matrix.path }}
          ## Multiline string
          tags: ${{ steps.image_tag.outputs.value}}-${{ env.COMMIT_SHORT_SHA }}

    outputs:
      branch: "${{ steps.extract_branch.outputs.branch }}"

  ## Read matrix outputs 
  read:
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - uses: cloudposse/github-action-matrix-outputs-read@main
        id: read
        with:
          matrix-step-name: build
    outputs:
      result: "${{ steps.read.outputs.result }}"
      branch: "${{ needs.build.outputs.branch }}"

  push_helm:
    needs: [read]
    runs-on: [self-hosted, linux]
    steps:
      - name: clone helmproject
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.TOKEN }}
          repository: "xiilab/uyuni-infra"
      - name : debug
        run: echo "${{ needs.read.outputs.result }}"

      - name: master 이미지 정보 수정
        if: ${{ needs.read.outputs.branch == 'master' }}
        uses: mikefarah/yq@master
        with:
          cmd: |
            yq -i '.astrago.core.imageTag = "${{ fromJson(needs.read.outputs.result).image.server-core }}"' 'environments/default/values.yaml'
            yq -i '.astrago.core.repository = "${{ fromJson(needs.read.outputs.result).tags.server-core }}"' 'environments/default/values.yaml'
            yq -i '.astrago.batch.imageTag = "${{ fromJson(needs.read.outputs.result).image.server-batch }}"' 'environments/default/values.yaml'
            yq -i '.astrago.batch.repository = "${{ fromJson(needs.read.outputs.result).tags.server-batch }}"' 'environments/default/values.yaml'
            yq -i '.astrago.monitor.repository = "${{ fromJson(needs.read.outputs.result).image.server-monitor }}"' 'environments/default/values.yaml'
            yq -i '.astrago.monitor.imageTag = "${{ fromJson(needs.read.outputs.result).tags.server-monitor }}"' 'environments/default/values.yaml'

      - name: dev 이미지 정보 수정
        if: ${{ needs.read.outputs.branch != 'master' }}
        uses: mikefarah/yq@master
        with:
          cmd: |
            yq -i '.astrago.core.repository = "${{ fromJson(needs.read.outputs.result).image.server-core }}"' 'environments/dev/values.yaml'
            yq -i '.astrago.core.imageTag = "${{ fromJson(needs.read.outputs.result).tags.server-core }}"' 'environments/dev/values.yaml'
            yq -i '.astrago.batch.repository = "${{ fromJson(needs.read.outputs.result).image.server-batch }}"' 'environments/dev/values.yaml'
            yq -i '.astrago.batch.imageTag = "${{ fromJson(needs.read.outputs.result).tags.server-batch }}"' 'environments/dev/values.yaml'
            yq -i '.astrago.monitor.repository = "${{ fromJson(needs.read.outputs.result).image.server-monitor }}"' 'environments/dev/values.yaml'
            yq -i '.astrago.monitor.imageTag = "${{ fromJson(needs.read.outputs.result).tags.server-monitor }}"' 'environments/dev/values.yaml'
      - name: push monochart
        run: | #helmfile -e dev -l type=app template > monochart/monochart.yaml
          cat environments/dev/values.yaml
          echo "${{ fromJson(needs.read.outputs.result) }}"
          echo "${{ fromJson(needs.read.outputs.result) }}"
          echo "${{ fromJson(needs.read.outputs.result) }}"
          
          git pull
          git config --global user.email "100milliongold@xiilab.com"
          git config --global user.name "100milliongold"
          git add .
          git commit -m "update monochart"
          git push
      

  notify_slack:
    needs: [build, push_helm]  # 이 작업이 의존하는 이전 작업의 이름 추가
    runs-on: [self-hosted, linux]
    steps:
      - name: 작업 상태 확인
        id: check_status
        run: 'echo "작업 상태: ${{ job.status }}"'

      # 브랜치 네임이 마스터일 경우에만 docker.io 저장소로 보낸다
      - name: 작업결과에 따른 메세지 지정
        uses: haya14busa/action-cond@v1
        id: slack-message
        with:
          cond: ${{ needs.build.result  == 'success' }}
          if_true: 'Uyuni 백엔드 이미지 CI가 성공했습니다! :tada:'
          if_false: 'Uyuni 백엔드 이미지 CI가 실패했습니다. :warning:'
      - name: 작업결과에 따른 메세지 지정
        uses: haya14busa/action-cond@v1
        id: slack-status
        with:
          cond: ${{ needs.build.result  == 'success' }}
          if_true: 'success'
          if_false: 'failure'

      - name: Slack 알림 전송
        if: ${{ job.status }} == 'failure'
        uses: 8398a7/action-slack@v3
        with:
          status: '${{ steps.slack-status.outputs.value }}'
          text: '${{ steps.slack-message.outputs.value }}'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
