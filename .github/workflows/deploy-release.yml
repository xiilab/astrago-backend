name: Deploy to Staging workflow
run-name: ${{ github.actor }} deploys to Staging üöÄ
on:
  pull_request:
    types:
      - opened
      - synchronize
      - reopened
    branches:
      - main

concurrency:
  group: ci-dev-test-${{ github.ref }}
  cancel-in-progress: true

permissions: write-all

jobs:
  build:
    if: startsWith(github.head_ref, 'release/')
    runs-on: [ self-hosted, linux ]
    env:
      HARBOR_REGISTRY: harbor.xiilab.com:32443
      HARBOR_REPOSITORY: harbor.xiilab.com:32443/astrago
      DEPLOYMENT_REPOSITORY: xiilab/astrago-deployment
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@417ae3ccd767c252f5661f1ace9f835f9654f2b5 # v3.1.0
      - name: Restore cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-


      - name: Build with Gradle
        run: ./gradlew bootjar --no-daemon --parallel

      - name: Extract Release Image Tag
        id: extract_image_tag
        run: |       
          RELEASE_VERSION=$(echo "${GITHUB_HEAD_REF##*/}" | grep -E '^[0-9]+\.[0-9]+$')
          echo "RELEASE_VERSION=$RELEASE_VERSION"
          IMAGE_TAG=${RELEASE_VERSION}-$(git rev-parse --short=4 HEAD)-rc
          echo "IMAGE_TAG=$IMAGE_TAG"
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Docker Setup Buildx
        uses: docker/setup-buildx-action@v3
        with:
          buildkitd-flags: --debug --allow-insecure-entitlement security.insecure --allow-insecure-entitlement network.host
          platforms: linux/amd64
          driver-opts: |
            network=host
          #config: /etc/buildkit/buildkitd.toml
          config-inline: |
            [registry."${{ env.HARBOR_REGISTRY }}"]
              http = true
              insecure = true
              mirrors = ["${{ env.HARBOR_REGISTRY }}"]
              ca=["/etc/docker/certs.d/${{ env.HARBOR_REGISTRY }}/ca.crt"]
              [[registry."${{ env.HARBOR_REGISTRY }}".keypair]]
                key="/home/runner/tls/tls.key"
                cert="/home/runner/tls/tls.crt"

      # HarborÏóê Î°úÍ∑∏Ïù∏
      - name: harbor Î°úÍ∑∏Ïù∏
        uses: docker/login-action@v3.0.0
        with:
          registry: ${{ env.HARBOR_REGISTRY }}
          username: ${{ secrets.HARBOR_USERNAME }}
          password: ${{ secrets.HARBOR_PASSWORD }}

      # core image build & push
      - name: Build and push Core Docker images
        uses: docker/build-push-action@v5.1.0
        with:
          context: ./server-core
          file: server-core/Dockerfile
          push: true
          tags: ${{ env.HARBOR_REPOSITORY }}/core:${{ steps.extract_image_tag.outputs.IMAGE_TAG }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # batch image build & push
      - name: Build and push Batch Docker images
        uses: docker/build-push-action@v5.1.0
        with:
          context: ./server-batch
          file: server-batch/Dockerfile
          push: true
          tags: ${{ env.HARBOR_REPOSITORY }}/batch:${{ steps.extract_image_tag.outputs.IMAGE_TAG }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # monitor image build & push
      - name: Build and push Monitor Docker images
        uses: docker/build-push-action@v5.1.0
        with:
          context: ./server-monitor
          file: server-monitor/Dockerfile
          push: true
          tags: ${{ env.HARBOR_REPOSITORY }}/monitor:${{ steps.extract_image_tag.outputs.IMAGE_TAG }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: clone astrago deploy git repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.TOKEN }}
          repository: ${{ env.DEPLOYMENT_REPOSITORY }}

      - name: stage Ïù¥ÎØ∏ÏßÄ Ï†ïÎ≥¥ ÏàòÏ†ï
        uses: mikefarah/yq@master
        with:
          cmd: |
            yq -i '.astrago.core.repository = "${{ env.HARBOR_REPOSITORY }}"/core' 'environments/stage/values.yaml'
            yq -i '.astrago.core.imageTag = "${{ steps.extract_image_tag.outputs.IMAGE_TAG }}"' 'environments/stage/values.yaml'
            yq -i '.astrago.batch.repository = "${{ env.HARBOR_REPOSITORY }}"/batch' 'environments/stage/values.yaml'
            yq -i '.astrago.batch.imageTag = "${{ steps.extract_image_tag.outputs.IMAGE_TAG }}"' 'environments/stage/values.yaml'
            yq -i '.astrago.monitor.repository = "${{ env.HARBOR_REPOSITORY }}"/monitor' 'environments/stage/values.yaml'
            yq -i '.astrago.monitor.imageTag = "${{ steps.extract_image_tag.outputs.IMAGE_TAG }}"' 'environments/stage/values.yaml'

      - name: Commit and Push
        run: |
          git config --global user.email "100milliongold@xiilab.com"
          git config --global user.name "100milliongold"
          git add .
          git commit -m "update backend image tag"
          git push

      - name: notify to slack
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          author_name: Î∞±ÏóîÎìú Ïä§ÌÖåÏù¥Ïßï Î∞∞Ìè¨
          fields: repo,message,commit,author,action,eventName,ref,workflow,job,took
          if_mention: failure,cancelled
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }} # required